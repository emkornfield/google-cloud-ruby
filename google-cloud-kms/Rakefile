# Copyright 2018 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/setup"
require "bundler/gem_tasks"

require "rubocop/rake_task"
RuboCop::RakeTask.new

require "rake/testtask"
desc "Run tests."
Rake::TestTask.new do |t|
  t.test_files = FileList["test/**/*_test.rb"]
  t.warning = false
end

namespace :test do
  desc "Runs tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google-cloud-kms"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task[:test].invoke
  end
end

# Acceptance tests
desc "Run the google-cloud-kms acceptance tests."
task :acceptance, :project, :keyfile do |t, args|
  project = args[:project]
  project ||=
    ENV["KMS_TEST_PROJECT"] ||
    ENV["GCLOUD_TEST_PROJECT"]
  keyfile = args[:keyfile]
  keyfile ||=
    ENV["KMS_TEST_KEYFILE"] ||
    ENV["GCLOUD_TEST_KEYFILE"]
  if keyfile
    keyfile = File.read keyfile
  else
    keyfile ||=
      ENV["KMS_TEST_KEYFILE_JSON"] ||
      ENV["GCLOUD_TEST_KEYFILE_JSON"]
  end
  if project.nil? || keyfile.nil?
    fail "You must provide a project and keyfile. e.g. rake acceptance[test123, /path/to/keyfile.json] or KMS_TEST_PROJECT=test123 KMS_TEST_KEYFILE=/path/to/keyfile.json rake acceptance"
  end
  require "google/cloud/kms/v1/credentials"
  (Google::Cloud::Kms::V1::Credentials::PATH_ENV_VARS +
   Google::Cloud::Kms::V1::Credentials::JSON_ENV_VARS).each do |path|
    ENV[path] = nil
  end
  ENV["KMS_PROJECT"] = project
  ENV["KMS_TEST_PROJECT"] = project
  ENV["KMS_KEYFILE_JSON"] = keyfile

  Rake::Task["acceptance:run"].invoke
end

namespace :acceptance do
  task :run do
    $LOAD_PATH.unshift "lib"
    Dir.glob("acceptance/**/*_test.rb").each { |file| require_relative file }
  end

  desc "Run acceptance tests with coverage."
  task :coverage do
  end

  desc "Run acceptance cleanup."
  task :cleanup do
  end
end

require "yard"
require "yard/rake/yardoc_task"
YARD::Rake::YardocTask.new

desc "Run yard-doctest example tests."
task :doctest do
  puts "The google-cloud-kms gem does not have doctest tests."
end

desc "Run the CI build"
task :ci do
  header "BUILDING google-cloud-kms"
  header "google-cloud-kms rubocop", "*"
  Rake::Task[:rubocop].invoke
  header "google-cloud-kms doctest", "*"
  Rake::Task[:doctest].invoke
  header "google-cloud-kms test", "*"
  Rake::Task[:test].invoke
end

namespace :ci do
  desc "Run the CI build, with acceptance tests."
  task :acceptance do
    Rake::Task[:ci].invoke
    header "google-cloud-kms acceptance", "*"
    Rake::Task[:acceptance].invoke
  end
  task :a do
    # This is a handy shortcut to save typing
    Rake::Task["ci:acceptance"].invoke
  end
end

task :generate_partials do
  require "google/cloud/kms"
  Google::Cloud::Kms::AVAILABLE_VERSIONS.each do |version|
    require "google/cloud/kms/#{version}/key_management_service_client"
    class_methods = Google::Cloud::Kms.const_get(version.capitalize)::KeyManagementServiceClient.methods false
    class_methods.sort!
    file_path = "./lib/google/cloud/kms/#{version}/helpers.rb"
    params = Hash[class_methods.collect { |method_name| [method_name, ""] } ]
    params.each do |method_name, _|
      args = Google::Cloud::Kms.const_get(version.capitalize)::KeyManagementServiceClient.method(method_name).parameters
      params[method_name] = args.map { |arg| arg.last }
    end
    File.open(file_path, "w") do |f|
      config = ERB.new(File.read("./synth/helpers.rb.erb"))
      f.write(config.result(binding))
    end
    file_path = "./test/google/cloud/kms/#{version}/helpers_test.rb"
    File.open(file_path, "w") do |f|
      config = ERB.new(File.read("./synth/helpers_test.rb.erb"))
      f.write(config.result(binding))
    end
  end
end

task :default => :test

def header str, token = "#"
  line_length = str.length + 8
  puts ""
  puts token * line_length
  puts "#{token * 3} #{str} #{token * 3}"
  puts token * line_length
  puts ""
end
